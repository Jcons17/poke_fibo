// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_template/test/mock/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i9;
import 'dart:typed_data' as _i11;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_template/core/domain/domain.dart' as _i6;
import 'package:flutter_template/core/domain/entity/move_expanded.dart' as _i8;
import 'package:flutter_template/core/domain/entity/pokemon.dart' as _i7;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_1 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_2 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i4.SharedPreferences {
  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
        returnValueForMissingStub: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getInt,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getDouble,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getStringList,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as List<String>?);

  @override
  _i5.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [PokeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokeRepository extends _i1.Mock implements _i6.PokeRepository {
  @override
  _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>> getAllPokemon({
    int? limit = 10,
    int? offset = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllPokemon,
          [],
          {
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
            _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #getAllPokemon,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
                _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #getAllPokemon,
            [],
            {
              #limit: limit,
              #offset: offset,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>);

  @override
  _i5.Future<_i2.Either<Exception, List<_i8.MoveExpanded>>> getMoves(
          {required List<String>? ids}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMoves,
          [],
          {#ids: ids},
        ),
        returnValue:
            _i5.Future<_i2.Either<Exception, List<_i8.MoveExpanded>>>.value(
                _FakeEither_0<Exception, List<_i8.MoveExpanded>>(
          this,
          Invocation.method(
            #getMoves,
            [],
            {#ids: ids},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, List<_i8.MoveExpanded>>>.value(
                _FakeEither_0<Exception, List<_i8.MoveExpanded>>(
          this,
          Invocation.method(
            #getMoves,
            [],
            {#ids: ids},
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, List<_i8.MoveExpanded>>>);

  @override
  _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>> getMyTeamPokemon() =>
      (super.noSuchMethod(
        Invocation.method(
          #getMyTeamPokemon,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
            _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #getMyTeamPokemon,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
                _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #getMyTeamPokemon,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>);

  @override
  _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>> savePokemonForMyTeam(
          _i7.Pokemon? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #savePokemonForMyTeam,
          [pokemon],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
            _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #savePokemonForMyTeam,
            [pokemon],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>.value(
                _FakeEither_0<Exception, List<_i7.Pokemon>>(
          this,
          Invocation.method(
            #savePokemonForMyTeam,
            [pokemon],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, List<_i7.Pokemon>>>);

  @override
  _i5.Future<_i2.Either<Exception, _i2.Unit>> deletePokemonForMyTeam(
          _i7.Pokemon? pokemon) =>
      (super.noSuchMethod(
        Invocation.method(
          #deletePokemonForMyTeam,
          [pokemon],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
            _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #deletePokemonForMyTeam,
            [pokemon],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
                _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #deletePokemonForMyTeam,
            [pokemon],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i6.AuthRepository {
  @override
  _i5.Future<_i2.Either<Exception, _i6.User>> login(
    String? email,
    String? code,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            code,
          ],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i6.User>>.value(
            _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #login,
            [
              email,
              code,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i6.User>>.value(
                _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #login,
            [
              email,
              code,
            ],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i6.User>>);

  @override
  _i5.Future<_i2.Either<Exception, _i6.User>> getSession() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSession,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i6.User>>.value(
            _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #getSession,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i6.User>>.value(
                _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #getSession,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i6.User>>);

  @override
  _i5.Future<_i2.Either<Exception, _i2.Unit>> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
            _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
                _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #logout,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i2.Unit>>);

  @override
  _i5.Future<_i2.Either<Exception, _i6.User>> signUp(_i6.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [user],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i6.User>>.value(
            _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #signUp,
            [user],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i6.User>>.value(
                _FakeEither_0<Exception, _i6.User>(
          this,
          Invocation.method(
            #signUp,
            [user],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i6.User>>);

  @override
  _i5.Future<_i2.Either<Exception, _i2.Unit>> localAuth() =>
      (super.noSuchMethod(
        Invocation.method(
          #localAuth,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
            _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #localAuth,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<Exception, _i2.Unit>>.value(
                _FakeEither_0<Exception, _i2.Unit>(
          this,
          Invocation.method(
            #localAuth,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<Exception, _i2.Unit>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  @override
  _i5.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i9.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_1(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);

  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<_i11.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
        returnValueForMissingStub:
            _i5.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i5.Future<_i11.Uint8List>);

  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_2(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i3.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
